/***************************************************************************
 *   Copyright (C) 2005 by Nestor Aguirre                                  *
 *   nfaguirrec@unal.edu.co                                                *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/
#include "clusteringwithps.h"

#include <math.h>

#include <qvaluestack.h>
#include <qprogressbar.h>
#include <qlineedit.h>
#include <qfiledialog.h>
#include <qlistview.h>
#include <qimage.h>

#include <Set.h>
#include <PretopologicalMetricSpace.h>

#include <qgegraph.h>
#include <qgeedge.h>
#include <qgenode.h>

#include <swapmanager.h>
#include <navigationrule.h>
#include <dendrogramwidget.h>

static const unsigned char img0_clusteringwithpsbase[] = { 
	0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
	0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20,
	0x08, 0x06, 0x00, 0x00, 0x00, 0x73, 0x7a, 0x7a, 0xf4, 0x00, 0x00, 0x0a,
	0x3a, 0x49, 0x44, 0x41, 0x54, 0x58, 0x85, 0xa5, 0x97, 0x7b, 0x8c, 0x5c,
	0xd5, 0x7d, 0xc7, 0x3f, 0x77, 0xee, 0x79, 0xdc, 0x3b, 0x3b, 0xfb, 0xf0,
	0xe2, 0x7d, 0x60, 0xaf, 0x9d, 0xf5, 0xae, 0xd7, 0x6b, 0xcc, 0xb2, 0x7e,
	0x01, 0x26, 0x8e, 0x71, 0x1c, 0xa5, 0x52, 0x8d, 0x2d, 0x0b, 0x1b, 0x48,
	0xa3, 0x84, 0x47, 0x70, 0x6b, 0x02, 0x0d, 0x50, 0x50, 0x4a, 0xa3, 0x26,
	0x28, 0x0d, 0xb4, 0x4a, 0xa5, 0xa8, 0x45, 0x51, 0xfe, 0xa9, 0xda, 0x34,
	0x49, 0x1f, 0x71, 0x09, 0x51, 0x44, 0x48, 0x43, 0x10, 0x7e, 0x44, 0x36,
	0xd8, 0xc2, 0x05, 0x07, 0x42, 0xd8, 0xb5, 0x97, 0xd7, 0xae, 0xd9, 0xb5,
	0xd9, 0x9d, 0xc7, 0xce, 0xcc, 0x9d, 0x99, 0x3b, 0xcf, 0x3b, 0x8f, 0xd3,
	0x3f, 0x66, 0xbd, 0x31, 0xb5, 0x20, 0x69, 0x7b, 0xa4, 0xa3, 0xab, 0x2b,
	0x5d, 0x9d, 0xef, 0xf7, 0x9c, 0xf3, 0xfd, 0x7d, 0xbf, 0xbf, 0x6b, 0x8d,
	0xf6, 0x5f, 0xc3, 0xa5, 0xc3, 0xb2, 0x42, 0x94, 0xab, 0x65, 0x2c, 0xcb,
	0xa2, 0x33, 0xb2, 0x84, 0xd6, 0x96, 0x36, 0x94, 0x54, 0xd8, 0xb6, 0xcd,
	0x33, 0x27, 0x9f, 0x01, 0x60, 0x60, 0xd9, 0xc0, 0x49, 0x65, 0xab, 0x6d,
	0x3d, 0xbd, 0xbd, 0xb9, 0xa7, 0x8f, 0xfc, 0xb4, 0xfd, 0x89, 0xaf, 0x7d,
	0x9b, 0x6a, 0x10, 0xa0, 0xb4, 0xa2, 0x5e, 0xab, 0x77, 0x9d, 0x99, 0x1c,
	0x4f, 0x3c, 0x77, 0xec, 0x59, 0xeb, 0xaf, 0x1e, 0xfe, 0x6b, 0x56, 0x5f,
	0x7f, 0x15, 0xdd, 0xcb, 0xba, 0x98, 0x78, 0xe5, 0x2c, 0x93, 0xaf, 0x4d,
	0xf0, 0xcf, 0x3f, 0xfd, 0x2e, 0xbd, 0x1d, 0xbd, 0x8b, 0x78, 0x21, 0xfe,
	0x97, 0x63, 0xa4, 0x7f, 0xc4, 0x8c, 0xf4, 0x8f, 0x6c, 0xdb, 0x38, 0xbc,
	0x91, 0x0e, 0xd5, 0xde, 0x76, 0xdf, 0x1f, 0xdf, 0x6f, 0x5a, 0x97, 0xb6,
	0xf3, 0xf7, 0xdf, 0xff, 0x16, 0xbf, 0x1a, 0x3b, 0xed, 0x9f, 0x99, 0x3c,
	0x93, 0xd8, 0x72, 0xdd, 0x56, 0xf6, 0xed, 0xbe, 0xcd, 0x8c, 0x4f, 0x8e,
	0x9b, 0xbb, 0x3e, 0xff, 0x99, 0x8f, 0x5c, 0x4f, 0xfc, 0xbe, 0xc0, 0xf5,
	0x7a, 0x9d, 0x91, 0x55, 0x23, 0x66, 0x68, 0xc5, 0x10, 0x61, 0x37, 0x8c,
	0xeb, 0x86, 0x59, 0xd2, 0xd9, 0x49, 0x35, 0xa8, 0x72, 0xec, 0x97, 0x87,
	0xcd, 0xc9, 0x13, 0xc7, 0xf9, 0xf8, 0xb5, 0x9f, 0x40, 0xb9, 0x1a, 0x5b,
	0x0a, 0x3e, 0xb1, 0x75, 0x3b, 0xb5, 0x6a, 0x8d, 0xbf, 0xf9, 0xdb, 0x6f,
	0x9a, 0xaf, 0x7f, 0xed, 0x51, 0x6b, 0xe2, 0x95, 0xb3, 0xff, 0x3f, 0x02,
	0xe7, 0xa2, 0xe7, 0xcc, 0xda, 0x95, 0x6b, 0x71, 0x1c, 0x07, 0xd7, 0x0d,
	0xa3, 0x1c, 0x85, 0x2d, 0x04, 0xad, 0x1d, 0xed, 0x74, 0x2f, 0xef, 0x45,
	0x28, 0x89, 0x74, 0x14, 0x42, 0x09, 0xa4, 0xa3, 0x30, 0x06, 0x06, 0x36,
	0x0c, 0xd1, 0x73, 0x65, 0x17, 0x5f, 0xb8, 0xfb, 0x80, 0xf9, 0xb7, 0x7f,
	0xfd, 0x9e, 0xf5, 0xa5, 0x3f, 0xba, 0xff, 0xb2, 0x75, 0xad, 0xff, 0xa9,
	0x81, 0x37, 0xde, 0x1b, 0xbb, 0xec, 0xa3, 0xd1, 0x81, 0x51, 0x33, 0xbc,
	0x72, 0x18, 0x29, 0x25, 0x91, 0x48, 0x2b, 0x42, 0x0a, 0x8c, 0x81, 0xd6,
	0x8e, 0x36, 0xb4, 0xeb, 0x10, 0xb2, 0x43, 0x48, 0x57, 0xa3, 0x16, 0x08,
	0xd8, 0x52, 0xd0, 0xa8, 0x37, 0xd8, 0xbe, 0x6b, 0x1b, 0x33, 0x33, 0xb3,
	0xcc, 0x4d, 0xbe, 0xcf, 0xe1, 0x5f, 0x3c, 0xc7, 0xb3, 0x47, 0x7f, 0x66,
	0x01, 0xac, 0x58, 0xba, 0x62, 0x71, 0xed, 0x0f, 0xd5, 0xc0, 0x40, 0xef,
	0x80, 0x59, 0xd3, 0xb7, 0xc6, 0xac, 0x1f, 0x5c, 0x6f, 0xd6, 0xad, 0x5a,
	0x87, 0xe3, 0x38, 0x84, 0x42, 0x21, 0x3c, 0x2f, 0x4d, 0x50, 0x09, 0x58,
	0xbd, 0x69, 0x2d, 0xf5, 0x7a, 0x83, 0x4a, 0xa9, 0x8c, 0xd0, 0x12, 0xa7,
	0xc5, 0x41, 0x28, 0x41, 0x48, 0xd8, 0x48, 0x47, 0xe1, 0x44, 0x5c, 0xe6,
	0x66, 0x63, 0x54, 0x4a, 0x65, 0xca, 0xf9, 0x12, 0x6b, 0x56, 0x0c, 0xb3,
	0x61, 0xf5, 0x06, 0x03, 0x20, 0x6c, 0xf1, 0xdb, 0x59, 0x6b, 0xd4, 0x2f,
	0x03, 0x1f, 0xbc, 0x72, 0xd0, 0x0c, 0xf5, 0x0d, 0xe1, 0x3a, 0x2e, 0xae,
	0xe3, 0x62, 0x8c, 0xa1, 0x58, 0x2c, 0xf2, 0xa9, 0x5b, 0x77, 0xb2, 0x73,
	0xef, 0x1f, 0x20, 0x84, 0x20, 0xe5, 0x79, 0x68, 0xad, 0x29, 0x14, 0x0a,
	0xbc, 0x74, 0xe8, 0x14, 0x8d, 0x86, 0xc1, 0x96, 0xa2, 0xa9, 0x01, 0x61,
	0x23, 0x94, 0x20, 0x95, 0x48, 0xe3, 0xb6, 0xb8, 0xe4, 0xd3, 0x3e, 0x67,
	0xc6, 0x7e, 0xc3, 0x1b, 0x53, 0x6f, 0x00, 0x30, 0x9d, 0x98, 0x5e, 0xc4,
	0x12, 0x61, 0x1d, 0x46, 0xd8, 0xbf, 0x95, 0xc2, 0xaa, 0xde, 0x55, 0x66,
	0xdd, 0xc7, 0xae, 0x42, 0x4a, 0x45, 0xd8, 0x0d, 0x93, 0x2f, 0xe4, 0x59,
	0x35, 0x38, 0xc8, 0x97, 0xbf, 0xf5, 0xe7, 0x24, 0xd3, 0x69, 0xc6, 0xc6,
	0xdf, 0xc4, 0xcf, 0xf8, 0x54, 0x4a, 0x15, 0x6a, 0x41, 0x0d, 0x80, 0x35,
	0x9b, 0x86, 0xb9, 0x30, 0xf9, 0x3e, 0x00, 0x52, 0xcb, 0x05, 0x02, 0x12,
	0xa5, 0x25, 0x42, 0x0a, 0x6e, 0xbc, 0xe5, 0x93, 0xdc, 0x74, 0xe7, 0x4d,
	0x74, 0x3f, 0xb1, 0x1c, 0x80, 0xe7, 0x8f, 0x1f, 0x67, 0x6a, 0x7c, 0x92,
	0x23, 0x4f, 0x3d, 0x8b, 0x18, 0x5d, 0xbb, 0x9e, 0xf9, 0x64, 0x02, 0xdb,
	0xb6, 0x01, 0xc8, 0x95, 0x72, 0x28, 0xa5, 0x17, 0xc1, 0xaf, 0xdf, 0xb1,
	0x8d, 0x07, 0xbf, 0x7a, 0x1f, 0x27, 0x4e, 0xbd, 0x8c, 0x97, 0xcc, 0x90,
	0xcf, 0xe4, 0x29, 0xfb, 0x45, 0x0a, 0x99, 0x3c, 0x41, 0xb1, 0x42, 0x50,
	0xae, 0x30, 0xf9, 0xea, 0x5b, 0x2c, 0xed, 0xeb, 0x66, 0xe5, 0xd5, 0xfd,
	0x54, 0x83, 0x1a, 0x52, 0x09, 0xa4, 0x56, 0x08, 0x61, 0x23, 0xa5, 0x20,
	0x08, 0xaa, 0xf8, 0xa6, 0xc0, 0xc3, 0x5f, 0x79, 0x88, 0x87, 0xff, 0xe2,
	0x11, 0x33, 0x7a, 0xf5, 0x26, 0xcb, 0x9b, 0x4b, 0x91, 0xcd, 0x67, 0x11,
	0x41, 0x50, 0xa1, 0x12, 0x54, 0x08, 0x85, 0x42, 0x18, 0x63, 0x70, 0x1d,
	0x97, 0xb0, 0x1b, 0x6e, 0x8a, 0x6f, 0xf3, 0x26, 0xfe, 0xf4, 0x2b, 0xf7,
	0xf0, 0xcb, 0x17, 0x4e, 0x92, 0x49, 0x66, 0xf0, 0x53, 0x39, 0xf2, 0xa9,
	0x1c, 0x7e, 0x2a, 0x4b, 0xce, 0xcb, 0x92, 0xf1, 0xd2, 0x8c, 0x4d, 0x8e,
	0x51, 0x28, 0x15, 0x98, 0x4d, 0xcd, 0xb2, 0xff, 0x8b, 0xf7, 0xb2, 0xe3,
	0x53, 0x9f, 0x46, 0x48, 0x41, 0x28, 0x64, 0xa1, 0x94, 0x44, 0x6a, 0x85,
	0x6d, 0x87, 0x10, 0x42, 0x60, 0x8c, 0x61, 0xef, 0xad, 0xb7, 0xf2, 0xdd,
	0xef, 0xfc, 0xa3, 0xb9, 0x66, 0x68, 0xd4, 0x02, 0x10, 0xf5, 0x7a, 0x9d,
	0xee, 0xa5, 0xdd, 0x00, 0xfc, 0xf0, 0xd0, 0x0f, 0xb9, 0x61, 0xe4, 0x06,
	0xc2, 0xe1, 0x16, 0xe6, 0x93, 0x09, 0x1e, 0x7a, 0xfc, 0xc1, 0xe6, 0xce,
	0xe7, 0x33, 0xe4, 0x12, 0x1e, 0xd9, 0xb8, 0x87, 0x37, 0x9f, 0x62, 0x3e,
	0x16, 0xe7, 0xf4, 0xd9, 0xd3, 0x44, 0xbd, 0x28, 0xc5, 0x72, 0xd1, 0xba,
	0x54, 0x3f, 0xf7, 0x3d, 0xf0, 0xa0, 0xd9, 0xb9, 0x7b, 0x17, 0xc2, 0x16,
	0xcd, 0xeb, 0xb0, 0x6d, 0xa4, 0x94, 0x68, 0x25, 0x71, 0x5c, 0x17, 0xbf,
	0x50, 0x64, 0xfb, 0xf6, 0x1d, 0x3c, 0x7d, 0xf0, 0x29, 0xd3, 0xe2, 0x84,
	0xad, 0x10, 0x34, 0x4d, 0x66, 0x01, 0xdc, 0x6c, 0x18, 0xde, 0x48, 0xb1,
	0x58, 0xe0, 0x4f, 0xbe, 0xfe, 0x25, 0xc6, 0xdf, 0x7a, 0x8b, 0x4c, 0x32,
	0x8b, 0x9f, 0xcc, 0x92, 0x8d, 0x7b, 0xcc, 0xcf, 0xc6, 0x98, 0x3e, 0x77,
	0x8e, 0xc3, 0x2f, 0x1f, 0x66, 0x2a, 0x3a, 0x65, 0x15, 0xcb, 0x45, 0xab,
	0xab, 0xbd, 0x0b, 0xcb, 0x6a, 0x72, 0xb8, 0xf7, 0xfe, 0x07, 0xcc, 0x4d,
	0xbb, 0x77, 0x23, 0x85, 0x40, 0x28, 0x89, 0x10, 0x02, 0xa5, 0x14, 0x8e,
	0x56, 0xb8, 0xae, 0x8b, 0xb4, 0x6d, 0x6a, 0xb5, 0x1a, 0x21, 0xdb, 0xe6,
	0xda, 0xd1, 0xeb, 0x19, 0x3f, 0x77, 0x26, 0x1a, 0x02, 0x98, 0x78, 0x6f,
	0x22, 0xbe, 0x6d, 0xfd, 0x36, 0xb3, 0x61, 0x78, 0x23, 0x42, 0x09, 0x22,
	0x91, 0x56, 0xb6, 0x5c, 0xb7, 0x99, 0xf8, 0x5c, 0x82, 0x82, 0xe7, 0xe3,
	0xa7, 0xb2, 0x24, 0xa3, 0x71, 0x2e, 0x5c, 0x38, 0xcf, 0xb1, 0xd7, 0x8f,
	0xe1, 0x15, 0x3c, 0xd5, 0xd9, 0xda, 0x89, 0x65, 0x59, 0x24, 0x73, 0x49,
	0xaa, 0xb5, 0x1a, 0x3f, 0xf9, 0xcf, 0x67, 0xb1, 0xed, 0x10, 0x52, 0xc9,
	0xa6, 0x00, 0x17, 0xa6, 0x56, 0x92, 0x48, 0x24, 0x42, 0xbd, 0x5e, 0xe7,
	0xfd, 0x68, 0x8c, 0xa0, 0x5c, 0xc1, 0x18, 0x83, 0x65, 0x81, 0x96, 0xba,
	0x37, 0xf4, 0xe4, 0xd1, 0x27, 0x89, 0x44, 0x5a, 0xbb, 0x47, 0x87, 0xd7,
	0x2f, 0xba, 0xdb, 0xf0, 0x96, 0x6b, 0x38, 0x37, 0x33, 0x4d, 0x21, 0x57,
	0xa0, 0x90, 0xc9, 0x93, 0x9d, 0xcf, 0x10, 0x8f, 0xc6, 0x38, 0x31, 0x76,
	0x82, 0x42, 0xb9, 0x60, 0x09, 0x5b, 0x54, 0xbd, 0xbc, 0x07, 0x80, 0x31,
	0x06, 0x61, 0xdb, 0x7c, 0xe6, 0xe6, 0x3d, 0x08, 0x21, 0x08, 0xd9, 0xf6,
	0xc2, 0xae, 0x35, 0xae, 0xd6, 0xb4, 0xb4, 0xb4, 0x90, 0x4c, 0xa5, 0x39,
	0x7f, 0xfe, 0x7d, 0xa2, 0x17, 0x62, 0xcc, 0xcd, 0xc4, 0xa8, 0x05, 0x55,
	0x00, 0xfc, 0x92, 0x8f, 0xd8, 0x32, 0xb2, 0x65, 0x6a, 0xe3, 0xda, 0xcd,
	0x08, 0x25, 0x71, 0xc3, 0x61, 0xaa, 0x41, 0xc0, 0x95, 0x83, 0xcb, 0xc8,
	0xe6, 0x7c, 0x4a, 0x7e, 0x89, 0x52, 0xb6, 0x80, 0x37, 0x9f, 0xe4, 0xa5,
	0xf1, 0x97, 0xc8, 0x16, 0xb2, 0x96, 0xb0, 0x05, 0xb5, 0x7a, 0x0d, 0x63,
	0x0c, 0xd3, 0xb3, 0x17, 0x00, 0xf8, 0xc5, 0x91, 0xa3, 0x1c, 0x39, 0x7c,
	0xc8, 0xec, 0xd9, 0xb7, 0x17, 0xdb, 0xb6, 0x71, 0xb4, 0x6e, 0x0a, 0x50,
	0x4a, 0xa2, 0xb1, 0x38, 0x5e, 0x2a, 0x4b, 0x2e, 0x9d, 0xa3, 0xe0, 0xf9,
	0x14, 0xb3, 0x05, 0x0a, 0x9e, 0x4f, 0x50, 0x09, 0x9a, 0x3e, 0x10, 0xb2,
	0xec, 0x01, 0xe5, 0x28, 0xc2, 0x2d, 0x2d, 0x48, 0xad, 0xb0, 0x2c, 0x0b,
	0xa9, 0x24, 0x95, 0x52, 0x85, 0x6a, 0x39, 0x20, 0x9f, 0xf5, 0x89, 0x27,
	0xa2, 0x24, 0xb2, 0x89, 0xa2, 0x96, 0x9a, 0x7a, 0xa3, 0x8e, 0x31, 0x86,
	0x43, 0x2f, 0xbc, 0xc0, 0xce, 0x1d, 0x3b, 0x38, 0xfc, 0xe2, 0x0b, 0x1c,
	0x3e, 0xf4, 0x7c, 0x70, 0xf3, 0x2d, 0xfb, 0x16, 0xc1, 0xa5, 0xb0, 0xd1,
	0x5a, 0x93, 0xc9, 0x66, 0xf1, 0x52, 0x59, 0xbc, 0x78, 0x1a, 0x3f, 0x99,
	0x25, 0x37, 0x9f, 0x21, 0x97, 0xce, 0xe0, 0x25, 0xd3, 0xc4, 0xe7, 0x63,
	0x14, 0x2b, 0x45, 0xc4, 0xaa, 0xd1, 0xa1, 0x9c, 0x6d, 0xdb, 0x6d, 0x62,
	0xe1, 0xee, 0xa4, 0x23, 0x49, 0x9c, 0x8f, 0x33, 0x78, 0xcd, 0x20, 0x41,
	0xa9, 0x42, 0xd1, 0xcf, 0x33, 0x76, 0x6e, 0x9c, 0x46, 0xa3, 0xd1, 0x17,
	0x34, 0x9a, 0xac, 0xa3, 0xf3, 0x71, 0x76, 0xee, 0xd8, 0x01, 0xc0, 0x53,
	0x07, 0xff, 0xe3, 0xed, 0xcf, 0xdf, 0x75, 0xa7, 0x14, 0x42, 0xa0, 0x95,
	0x42, 0x49, 0x81, 0x54, 0x0a, 0x47, 0x29, 0xb2, 0x5e, 0x73, 0xe7, 0x7e,
	0x2a, 0x47, 0x26, 0x9a, 0x62, 0x7e, 0x2e, 0x4e, 0x34, 0x36, 0xc7, 0xa9,
	0x33, 0xa7, 0x48, 0xf9, 0xa9, 0xb3, 0xc0, 0x48, 0xe8, 0xc0, 0xfd, 0x5f,
	0x6c, 0xcf, 0xbb, 0x25, 0xea, 0xb5, 0x3a, 0xd2, 0x91, 0xb8, 0x6d, 0x2d,
	0x64, 0x62, 0x69, 0x5c, 0xd7, 0xc5, 0x0a, 0x59, 0x54, 0xca, 0x15, 0x52,
	0x7e, 0x0a, 0xc0, 0x33, 0xc6, 0x60, 0x8c, 0xe1, 0xca, 0xae, 0x1e, 0x00,
	0xf6, 0x1f, 0x38, 0x30, 0x71, 0xe7, 0xfe, 0xbb, 0xd7, 0x5c, 0x54, 0xba,
	0xe3, 0x68, 0xa4, 0x52, 0x68, 0x29, 0x71, 0xb4, 0x43, 0x25, 0xa8, 0x51,
	0xce, 0x97, 0xc8, 0x25, 0x3c, 0x12, 0xb3, 0x31, 0x26, 0xdf, 0x7b, 0x97,
	0xa3, 0xaf, 0x1e, 0x25, 0xe5, 0xa7, 0x54, 0x4f, 0x47, 0xcf, 0x08, 0x40,
	0xc8, 0xd1, 0x9a, 0xe5, 0x2d, 0xcb, 0xad, 0x37, 0xa7, 0x27, 0x50, 0xae,
	0x46, 0x28, 0x49, 0xa4, 0xb3, 0x8d, 0x33, 0xbf, 0x3a, 0x4b, 0x47, 0x4f,
	0x27, 0x69, 0x2f, 0x45, 0xa9, 0x52, 0x9a, 0x31, 0xc6, 0x2c, 0xda, 0x28,
	0xc0, 0x43, 0x8f, 0x3c, 0x62, 0xee, 0xd8, 0x7f, 0xf7, 0x55, 0x4a, 0x49,
	0x1c, 0xad, 0x50, 0x4a, 0x21, 0x84, 0xc0, 0xd5, 0x1a, 0xa5, 0x14, 0x6d,
	0x91, 0x08, 0x8e, 0xa3, 0x08, 0x4a, 0x15, 0x0a, 0xb9, 0x02, 0xb1, 0x78,
	0x94, 0x53, 0x13, 0xa7, 0x28, 0x57, 0xcb, 0x96, 0x65, 0x59, 0xd5, 0xc5,
	0x2c, 0x38, 0xf2, 0xe4, 0x61, 0x1e, 0x7b, 0xe2, 0x51, 0x6e, 0xdb, 0xf7,
	0xb9, 0x66, 0xed, 0x2a, 0xb1, 0x30, 0x25, 0xe1, 0xb6, 0x16, 0xfe, 0xf0,
	0xf6, 0x9b, 0x49, 0x97, 0xd3, 0x5d, 0x00, 0x9f, 0xbd, 0xfd, 0xf6, 0xd3,
	0x3d, 0x3d, 0x3d, 0xd7, 0x1d, 0x7a, 0xee, 0x39, 0x6e, 0xbe, 0x65, 0xdf,
	0xe2, 0x7d, 0x0b, 0xd9, 0x14, 0x9c, 0x12, 0x62, 0xf1, 0xd9, 0x68, 0x34,
	0xd8, 0x30, 0xb2, 0x8e, 0x77, 0x5e, 0x7f, 0x87, 0x4a, 0xa9, 0xc8, 0x6b,
	0xef, 0xbc, 0x46, 0xa9, 0x52, 0xb2, 0xa4, 0x90, 0xd4, 0x2f, 0x09, 0x40,
	0xd1, 0xb9, 0x7c, 0x29, 0x7b, 0xf7, 0xdc, 0x96, 0xdd, 0xf1, 0xc9, 0x4f,
	0x37, 0x43, 0x44, 0x37, 0xb5, 0x20, 0xa4, 0x8d, 0x69, 0x34, 0xe8, 0x59,
	0xd9, 0xc3, 0x57, 0xff, 0xee, 0xf1, 0xf0, 0x03, 0x0f, 0x3d, 0x6c, 0xf6,
	0xdf, 0x73, 0x4f, 0xb3, 0xd6, 0xa5, 0x44, 0x2b, 0xb5, 0x08, 0xee, 0x28,
	0x4d, 0x28, 0x64, 0xa1, 0xb5, 0x46, 0x2b, 0x85, 0xb0, 0x45, 0xb3, 0x6b,
	0x72, 0x1c, 0x96, 0xad, 0xee, 0x63, 0x7a, 0xec, 0x5d, 0x4a, 0x95, 0xd2,
	0x62, 0xd9, 0x02, 0x84, 0x42, 0xcd, 0x4e, 0x20, 0xf4, 0x67, 0x5f, 0xbe,
	0x17, 0xad, 0x75, 0x9b, 0xd4, 0x12, 0xe5, 0x6a, 0xa4, 0x96, 0x28, 0x47,
	0x21, 0xb5, 0x5a, 0xa8, 0x0a, 0xa8, 0x05, 0x55, 0xf6, 0xdc, 0xb2, 0x17,
	0x21, 0xec, 0x45, 0x67, 0xbb, 0x28, 0x36, 0x2d, 0x9b, 0xa1, 0xe3, 0x3a,
	0x2e, 0x4a, 0x4a, 0x94, 0x54, 0xb4, 0x45, 0x5a, 0x09, 0xaa, 0x01, 0xc7,
	0x5e, 0x3a, 0x45, 0x24, 0xe2, 0xb2, 0x72, 0xdd, 0xc0, 0x62, 0xe2, 0x6a,
	0xa1, 0x71, 0xa5, 0x4b, 0x2a, 0x97, 0x22, 0xac, 0xc2, 0xcd, 0x96, 0x4c,
	0x5c, 0x0c, 0x0d, 0x69, 0x23, 0xa4, 0x68, 0x86, 0x87, 0x14, 0x68, 0x2d,
	0x11, 0xc2, 0xc6, 0x96, 0x4d, 0x5b, 0xbd, 0xe8, 0xe9, 0x72, 0xe1, 0xbd,
	0xb5, 0xa5, 0x05, 0x47, 0x6b, 0x1c, 0xe5, 0x20, 0x65, 0xf3, 0xd8, 0x1d,
	0xed, 0x10, 0x54, 0x03, 0x4e, 0xbe, 0x72, 0x9a, 0x62, 0xbe, 0x48, 0x36,
	0x95, 0xc5, 0x89, 0xb8, 0xf4, 0x2f, 0xeb, 0x07, 0xa0, 0x18, 0x14, 0x17,
	0x8f, 0x3f, 0x20, 0x68, 0x12, 0xb0, 0x65, 0x33, 0x8a, 0xb5, 0xab, 0xe9,
	0xec, 0x5a, 0x82, 0x90, 0x82, 0x42, 0xbe, 0x88, 0x54, 0xcd, 0x6c, 0x97,
	0xb2, 0x19, 0x2a, 0x4a, 0x36, 0xbd, 0x5d, 0x29, 0x85, 0x12, 0x82, 0xd9,
	0x58, 0x0c, 0x3f, 0x97, 0xc7, 0x18, 0x43, 0x7b, 0x47, 0x1b, 0xeb, 0xaf,
	0x5a, 0x47, 0xbd, 0x51, 0xe7, 0xc4, 0x7f, 0xbd, 0x4c, 0xb9, 0x54, 0x21,
	0x9b, 0xca, 0x92, 0x4d, 0x64, 0xc8, 0x44, 0x53, 0xb4, 0x2f, 0x59, 0x02,
	0xc0, 0xb5, 0x43, 0xd7, 0x5e, 0x9a, 0x5d, 0x4d, 0x02, 0x5b, 0x3f, 0x7e,
	0xa3, 0xf5, 0xee, 0xf4, 0x9b, 0xe6, 0xce, 0x2f, 0xdc, 0x45, 0x2c, 0x9e,
	0xa0, 0x54, 0x28, 0xe1, 0xb8, 0x0e, 0x42, 0xd8, 0x5c, 0xac, 0x6f, 0xdb,
	0x0e, 0xa1, 0x17, 0xec, 0xd5, 0xb2, 0x2c, 0xa6, 0xa6, 0xcf, 0xe3, 0x67,
	0x7d, 0xf2, 0x99, 0x3c, 0xa5, 0x7c, 0x09, 0xd3, 0x68, 0x30, 0xf1, 0xfa,
	0x5b, 0x2c, 0x5f, 0xb5, 0x8c, 0x20, 0x08, 0x48, 0x27, 0x3c, 0xf2, 0xa9,
	0x1c, 0xd9, 0xb8, 0x47, 0x2a, 0x96, 0xc0, 0x35, 0x1a, 0x57, 0xb9, 0x66,
	0x49, 0xeb, 0x92, 0x0f, 0xa4, 0xa7, 0xf5, 0xbd, 0x1f, 0x1c, 0xa4, 0x5a,
	0x0e, 0x58, 0xb7, 0x79, 0x1d, 0x07, 0xff, 0xe5, 0xdf, 0xcd, 0xf5, 0xd7,
	0x6d, 0xa5, 0x9c, 0x2f, 0xe1, 0xcd, 0x25, 0xd9, 0x75, 0xfb, 0x4d, 0x54,
	0x6b, 0x35, 0xa4, 0x10, 0x58, 0xa1, 0x10, 0x61, 0xc7, 0x45, 0x6b, 0xc5,
	0xd4, 0xf4, 0x0c, 0xe9, 0x64, 0xa6, 0xe9, 0x70, 0xa9, 0x1c, 0x85, 0xb4,
	0x4f, 0xa5, 0xd8, 0xf4, 0x12, 0xb7, 0xb5, 0x85, 0x65, 0xc3, 0x2b, 0x28,
	0x17, 0xca, 0x24, 0x67, 0x62, 0xa4, 0xe3, 0xf3, 0x5c, 0x38, 0x7f, 0x9e,
	0xe3, 0xaf, 0x1f, 0xc7, 0x2f, 0xf9, 0x1f, 0x00, 0x5f, 0x3c, 0x01, 0x00,
	0xad, 0x24, 0x43, 0xcb, 0xd7, 0xa8, 0xe7, 0x7f, 0xf6, 0xf3, 0x60, 0x64,
	0x70, 0x84, 0x0b, 0x93, 0xd3, 0xcc, 0xcd, 0x6d, 0x62, 0x60, 0xb0, 0x9f,
	0x6a, 0xb5, 0x8a, 0xab, 0x35, 0xae, 0xeb, 0x92, 0x4c, 0xa7, 0xc9, 0xfb,
	0x79, 0xb2, 0xc9, 0x0c, 0x7e, 0x32, 0x4b, 0x26, 0x9a, 0x22, 0x19, 0x4d,
	0x30, 0x3f, 0x9f, 0x60, 0x6c, 0x6a, 0x8c, 0x6a, 0xad, 0x4a, 0x7b, 0xa4,
	0x9d, 0x65, 0x7d, 0x7d, 0x0c, 0xf5, 0xad, 0x66, 0x66, 0x7a, 0x9a, 0x17,
	0xdf, 0x78, 0x11, 0xbf, 0xe4, 0x5b, 0x97, 0xb6, 0x7e, 0x97, 0x11, 0x00,
	0x70, 0xdb, 0x5a, 0xaa, 0x4f, 0xff, 0xfc, 0xc7, 0xd6, 0x8d, 0x1b, 0xb6,
	0x9b, 0x6a, 0x39, 0x20, 0xfd, 0x9d, 0x7f, 0xe2, 0x07, 0x3f, 0xfa, 0x3e,
	0x59, 0x3f, 0xb7, 0xa0, 0x01, 0x49, 0x32, 0x95, 0x26, 0xe7, 0xe5, 0x29,
	0x64, 0xf2, 0xe4, 0x12, 0x19, 0x12, 0xb3, 0x31, 0xce, 0xcd, 0x4c, 0xf1,
	0xeb, 0x77, 0x7f, 0x4d, 0xda, 0x4f, 0x7f, 0x60, 0x87, 0x2b, 0xba, 0x56,
	0x98, 0x64, 0x36, 0x49, 0xb9, 0x5a, 0xb6, 0xc2, 0x2a, 0x4c, 0x50, 0x0f,
	0x3e, 0x9a, 0x00, 0xc0, 0x5f, 0xde, 0xfb, 0x28, 0x27, 0x7f, 0x73, 0xc2,
	0xb2, 0x43, 0xb6, 0x69, 0xbc, 0xfd, 0x8a, 0x7a, 0xec, 0xf1, 0x95, 0x2f,
	0xef, 0xdc, 0xb5, 0x7b, 0x13, 0x96, 0x85, 0x69, 0x34, 0x68, 0x34, 0x0c,
	0xe5, 0x42, 0x89, 0x82, 0xe7, 0x93, 0x49, 0xa5, 0x99, 0x8b, 0xce, 0x72,
	0xfa, 0xcd, 0xd3, 0xf8, 0x65, 0xdf, 0x6a, 0x6f, 0x69, 0x27, 0x57, 0xcc,
	0xa1, 0xa5, 0xa6, 0xef, 0x8a, 0x3e, 0xfa, 0x7b, 0xfa, 0xad, 0x5a, 0xbd,
	0x46, 0xcc, 0x8b, 0x5d, 0x06, 0xfc, 0xa1, 0x04, 0x00, 0xae, 0xfe, 0xd8,
	0xd5, 0x74, 0x44, 0x3a, 0xac, 0xb4, 0x9f, 0xe6, 0xb1, 0x6f, 0x7c, 0x63,
	0xf3, 0x1d, 0xb7, 0xdd, 0xf1, 0xf6, 0xae, 0x3d, 0x7b, 0xd7, 0xd8, 0xa2,
	0x59, 0x2d, 0xf5, 0x5a, 0x9d, 0x52, 0xae, 0x88, 0x97, 0x4c, 0x71, 0x72,
	0xfc, 0x24, 0x7e, 0xd9, 0xb7, 0xec, 0x90, 0xfd, 0xa1, 0x20, 0x1f, 0x35,
	0x7e, 0xe7, 0xaf, 0x59, 0x67, 0x7b, 0x07, 0x77, 0xdd, 0x77, 0x60, 0xf8,
	0x1f, 0xbe, 0xf9, 0xed, 0xfa, 0x0d, 0x9b, 0xb7, 0x86, 0x6c, 0x21, 0x30,
	0x8d, 0x06, 0xb5, 0x5a, 0x8d, 0x57, 0x27, 0x5e, 0x5d, 0xec, 0x11, 0x2c,
	0xcb, 0xe2, 0xff, 0x42, 0xe2, 0x77, 0x12, 0xd8, 0xbc, 0x7a, 0x13, 0xf5,
	0x46, 0x83, 0xee, 0x25, 0xdd, 0xf6, 0x8f, 0x9e, 0x39, 0x18, 0x2d, 0x05,
	0xa5, 0xde, 0x2b, 0xda, 0xae, 0xa0, 0xd1, 0x68, 0x90, 0xce, 0xa7, 0xb1,
	0x2c, 0xab, 0xd9, 0x13, 0x1a, 0xf0, 0xf2, 0xde, 0x62, 0x7f, 0xf8, 0xfb,
	0x8e, 0xff, 0x06, 0xec, 0x6c, 0x80, 0x5c, 0xf7, 0x0f, 0xbe, 0x63, 0x00,
	0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
};

ClusteringWithPS::ClusteringWithPS( QWidget* parent, const char* name )
: ClusteringWithPSBase( parent, name )
{
	currentButton = EUCLIDEAN_DISTANCE ;
	
	listViewEquivalenceClasses->setColumnWidth(0, 420) ;
	listViewEquivalenceClasses->setColumnWidth(1, 85) ;
	qwtSliderRadius->setRange( 0.0, 1.0 ) ;
	
	vcsf = new SwapFileViewer() ;
	vcsf->setSwapFileId( SwapManager::TEMPORARY ) ;
}

ClusteringWithPS::~ClusteringWithPS()
{
}

QMap< double, Set< Set<string> > > ClusteringWithPS::getEquivalenceClasses()
{
	if( equivalenceClasses.empty() )
		cerr << "### Warning: Equivalence Classes Map is empty " << endl ;
	return equivalenceClasses ;
}

QgeGraph* ClusteringWithPS::getTree( QgeGraph* qgegraph, QgeWidget* qgewidget )
{
	QgeWidget* mw = qgewidget ;
	
	QgeGraph* g = new QgeGraph(0) ;
	g->copy( qgegraph ) ;
	
	QgeGraph* a = new QgeGraph(0) ;
	a->setLabel( g->getLabel() ) ;
	a->make_undirected() ;
	
	QValueStack<QgeNode*> stack ;
	
	QgeItemType PHOSPHATE( "Phosphate", 10, 10 ) ;
	QgeItemType HYDROGEN( "Hydrogen", 2, 2 ) ;
	QgeItemType HYDROGEN2( "Hydrogen2", 2, 3 ) ;
	
	/*******************************************************
	* Implementaci� de la Gran rutina
	*/
	QgeNode* a1 = a->newNode() ;
	a1->setColorUnSelected( Qt::green ) ;
	stack.push( a1 ) ;
	
	QPtrList<QgeNode> listNodesSorted = NavigationRule::getSecuence( g, "Phosphate" ) ;
	
	for( QPtrList<QgeNode>::iterator it1 = listNodesSorted.begin(); it1 != listNodesSorted.end(); it1++ ){
		
		if( !(*it1)->isProcessed() ){
			
			bool containsHydrogenEdge = FALSE ;
			
			for( node::out_edges_iterator it2 = (*it1)->out_edges_begin(); it2 != (*it1)->out_edges_end(); it2++ ){
				if( ( g->edgeToQgeEdge(*it2)->getType().getName().compare( HYDROGEN.getName() ) == 0 ) ||
				    ( g->edgeToQgeEdge(*it2)->getType().getName().compare( HYDROGEN2.getName() ) == 0 ) ){
					containsHydrogenEdge = TRUE ;
					break ;
				}
			}
			
			for( node::out_edges_iterator it2 = (*it1)->out_edges_begin(); it2 != (*it1)->out_edges_end(); it2++ ){
			
				if( ( g->edgeToQgeEdge(*it2)->getType().getName().compare( HYDROGEN.getName() ) == 0 ) ||
				    ( g->edgeToQgeEdge(*it2)->getType().getName().compare( HYDROGEN2.getName() ) == 0 ) ){
				    
				    QgeNode* aTmp = a->newNode() ;
				    aTmp->setColorUnSelected( Qt::darkBlue ) ;
				    a->newEdge( stack.top(), aTmp ) ;
				    
				    // Se adicionan los pesos del primer nodo
				    QMap<QString, double> weightsName = (*it1)->getWeights() ;
				    for( QMap<QString, double>::iterator it3 = weightsName.begin(); it3 != weightsName.end(); it3++ ){
					aTmp->addWeight( it3.key()+",1", weightsName[it3.key()] ) ;
				    }
				    
				    // Se adicionan los pesos del segundo nodo
				    QMap<QString, double> weightsNameOpp = g->nodeToQgeNode( (*it1)->opposite( *it2 ) )->getWeights() ;
				    for( QMap<QString, double>::iterator it3 = weightsNameOpp.begin(); it3 != weightsNameOpp.end(); it3++ ){
					aTmp->addWeight( it3.key()+",2", weightsNameOpp[it3.key()] ) ;
				    }
				    
				    // Se le asigna al nuevo nodo el label del primero mas el label del opuesto
				    aTmp->setLabel( (*it1)->getLabel() + g->nodeToQgeNode( (*it1)->opposite(*it2) )->getLabel() ) ;
				    
				    (*it1)->setProcessed(TRUE) ;
				    g->nodeToQgeNode( (*it1)->opposite( *it2 ) )->setProcessed(TRUE) ;
				    
				    stack.push( aTmp ) ;
				    
				}else if( !containsHydrogenEdge ) {
					QgeNode* aTmp2 = a->newNode() ;
					aTmp2->setColorUnSelected( Qt::red ) ;
					a->newEdge( stack.top(), aTmp2 ) ;
					
					// Se adicionan los pesos del primer nodo
					QMap<QString, double> weightsName = (*it1)->getWeights() ;
					for( QMap<QString, double>::iterator it3 = weightsName.begin(); it3 != weightsName.end(); it3++ ){
						aTmp2->addWeight( it3.key()+",1", weightsName[it3.key()] ) ;
					}
					
					// Como no tiene opuestos se adiconan valores nulos
					for( QMap<QString, double>::iterator it3 = weightsName.begin(); it3 != weightsName.end(); it3++ ){
						aTmp2->addWeight( it3.key()+",2", 0.0 ) ;
					}
					
					// Se le asigna al nuevo nodo el label del primero ya que no tiene opuesto
					aTmp2->setLabel( (*it1)->getLabel() ) ;
					
					(*it1)->setProcessed(TRUE) ;
				}
			}
			
			if( (*it1)->outdeg() == 0 ){
					QgeNode* aTmp2 = a->newNode() ;
					aTmp2->setColorUnSelected( Qt::red ) ;
					a->newEdge( stack.top(), aTmp2 ) ;
					
					// Se adicionan los pesos del primer nodo
					QMap<QString, double> weightsName = (*it1)->getWeights() ;
					for( QMap<QString, double>::iterator it3 = weightsName.begin(); it3 != weightsName.end(); it3++ ){
						aTmp2->addWeight( it3.key()+",1", weightsName[it3.key()] ) ;
					}
					
					// Como no tiene opuestos se adiconan valores nulos
					for( QMap<QString, double>::iterator it3 = weightsName.begin(); it3 != weightsName.end(); it3++ ){
						aTmp2->addWeight( it3.key()+",2", 0.0 ) ;
					}
					
					// Se le asigna al nuevo nodo el label del primero ya que no tiene opuesto
					aTmp2->setLabel( (*it1)->getLabel() ) ;
					
					(*it1)->setProcessed(TRUE) ;
			}
			
		}else{
			stack.pop() ;
		}
		
	}
	
	/******************************************************************
	* Se escanea el arbol para asignar coordenadas
	*/
	int xTop, yTop ;
	if( qgewidget ){
		xTop = mw->canvas()->width()/2 ;
		yTop = mw->canvas()->height()/8 ;
	}else{
		xTop = 800/2 ;
		yTop = 600/2 ;
	}
	
	for( graph::node_iterator it1 = a->nodes_begin() ; it1 != a->nodes_end(); it1++){
			
		if( !a->nodeToQgeNode( *it1 )->isProcessed() ){
			
			if( it1 == a->nodes_begin() ){
				a->moveNode( a->nodeToQgeNode(*a->nodes_begin()), xTop, yTop) ;
				yTop += 30 ;
			}
			
			xTop = (int)a->nodeToQgeNode(*it1)->x() ;
			yTop = (int)a->nodeToQgeNode(*it1)->y() + 30 ;
				
			int degree = 0 ;
			for( node::adj_edges_iterator it2 = (*it1).adj_edges_begin(); it2 != (*it1).adj_edges_end(); it2++ ){
				if( !a->nodeToQgeNode( (*it1).opposite( *it2 ) )->isProcessed() )
					degree++ ;
			}
			
			/******************************************
			* Si el grado del vertice es par ...
			*/
			if( degree%2 == 0 ){
				int i=0 ;
				for( node::adj_edges_iterator it2 = (*it1).adj_edges_begin(); it2 != (*it1).adj_edges_end(); it2++, i++ ){
					if( !a->nodeToQgeNode( (*it1).opposite( *it2 ) )->isProcessed() ){
						
						a->moveNode( a->nodeToQgeNode( (*it1).opposite( *it2 ) ), (xTop+60*(degree-1)/2)-60*i, yTop ) ;
						
						if( (*it1).opposite( *it2 ).degree() == 1 ){
							a->nodeToQgeNode( (*it1).opposite( *it2 ) )->setProcessed(TRUE) ;
						}
						
						a->nodeToQgeNode( *it1 )->setProcessed(TRUE) ;
					}
				}
				
			}else{
				int i=0 ;
				for( node::adj_edges_iterator it2 = (*it1).adj_edges_begin(); it2 != (*it1).adj_edges_end(); it2++, i++ ){
					if( !a->nodeToQgeNode( (*it1).opposite( *it2 ) )->isProcessed() ){
						a->moveNode( a->nodeToQgeNode( (*it1).opposite( *it2 ) ), (xTop+30*(degree-1)/2)-30*i, yTop ) ;
						
						if( (*it1).opposite( *it2 ).degree() == 1 ){
							a->nodeToQgeNode( (*it1).opposite( *it2 ) )->setProcessed(TRUE) ;
						}
						
						a->nodeToQgeNode( *it1 )->setProcessed(TRUE) ;
					}
				}
			}
			
		}
	}
	
	/******************************************************************
	* Se ajusta el tama� a todos los nodos
	* @TODO Hacer copia de tama�s en el constructor de copia de 
	*       qgeNode
	*/
	if( qgewidget ){
		for( graph::node_iterator it1 = mw->getGraph()->nodes_begin() ; it1 != mw->getGraph()->nodes_end(); it1++){
			mw->getGraph()->nodeToQgeNode(*it1)->setEnableShowLabel(FALSE) ;
			mw->getGraph()->nodeToQgeNode(*it1)->setAutomaticResize(FALSE) ;
			mw->getGraph()->nodeToQgeNode(*it1)->setSize(15, 15) ;
		}
	}
	
	return a ;
}

double ClusteringWithPS::getEuclideanDistance( QgeGraph* tree1, QgeGraph* tree2 )
{
	QValueList<int> difflist ;
		
	difflist.clear() ;
	difflist = searchUsingLabel( tree1, tree2 ) ;
	
	double sum = 0.0 ;
	
	for( QValueList<int>::iterator it = difflist.begin(); it != difflist.end(); it++ ){
		
		QValueList<double> values1 ;
		
		if( *it < tree1->number_of_nodes() ){
			graph::node_iterator it2 = tree1->nodes_begin() ;
			
			for( int i = 0; it2 != tree1->nodes_end() ; it2++, i++ ){
				if( i == *it ){
					values1 = tree1->nodeToQgeNode(*it2)->getWeights().values() ;
					
				}
			}
			
		}else{
			for( int i=0; i<8; i++ ) values1.append(0.0) ;
		}
		
		
		QValueList<double> values2 ;
		
		if( *it < tree2->number_of_nodes() ){
			
			graph::node_iterator it2 = tree2->nodes_begin() ; 
			for( int i = 0 ; it2 != tree2->nodes_end() ; it2++, i++ ){
				if( i == *it ){
					values2 = tree2->nodeToQgeNode(*it2)->getWeights().values() ;
				}
			}
		}else{
			for( int i=0; i<8; i++ ) values2.append(0.0) ;
		}
		
		for( int i=0; i<8; i++ ) {
			sum += pow( values1[i] -values2[i], 2.0 ) ;
		}
	}
			
	return sqrt(sum) ;
}

double ClusteringWithPS::getFirstDifferenceDistance( QgeGraph* tree1, QgeGraph* tree2 )
{
	QValueList<int> difflist ;
		
	difflist.clear() ;
	difflist = searchUsingLabel( tree1, tree2 ) ;
	if (!difflist.empty())
		return 1.0/( *difflist.begin() + ( dot( tree1, tree2, *difflist.begin() )/MAX_DOT ) ) ;
	else 
		return 0.0;
}

double ClusteringWithPS::getAllDifferencesDistance( QgeGraph* tree1, QgeGraph* tree2 )
{
	QValueList<int> difflist ;
		
	difflist.clear() ;
	difflist = searchUsingLabel( tree1, tree2 ) ;
			
	double sum = 0.0 ;
	
	for( QValueList<int>::iterator it = difflist.begin(); it != difflist.end(); it++ )
		sum += 1.0/( *it + ( dot( tree1, tree2, *it )/MAX_DOT ) ) ;
			
	return sum ;
}

void ClusteringWithPS::showResults()
{
 	Set<double> balls ;
	cerr << "Finding max and minimum value ... " ;
	double max = 0.0 ;
	double min = 327454235.0 ;
	for( uint i=0; i<distance.size(); i++ ){
		for( uint j=0; j<distance[i].size(); j++ ){
				balls.insert(distance[i][j]);			
			if( max < distance[i][j] )
				max = distance[i][j] ;
			if( min > distance[i][j] && distance[i][j] != 0.0 )
				min = distance[i][j] ;
		}
	}
	cerr << "OK" << endl ;
	cerr << ",   Max = " << max << ": Min = " << min << endl ;
	
	cerr << "Making Universal set ... " ;
	Set<string> universal ;
	for ( int i=0; i<SwapManager::Instance( SwapManager::TEMPORARY )->getSize(); i++ ){
		QgeGraph* tmp = SwapManager::Instance( SwapManager::TEMPORARY )->getGraph(i) ;
		
		if( tmp )
			universal.insert( tmp->getLabel() ) ;
	}
	cerr << "OK" << endl ;
	cerr << "The universal set is = " << universal << endl ;
	
  	for ( Set<double>::iterator it = balls.begin() ; it != balls.end() ; it++ ){
		vector< Set<string> > vectorSet ;
		double currentRadius = *it ;
		
		cerr << "--------------------------------------" << endl ;
		cerr << "Radio de la bola actual = " << currentRadius << endl ;
		cerr << "--------------------------------------" << endl ;
		
		for( uint i=0; i<distance.size(); i++ ){
			
			Set<string> tmp ;
			
			QgeGraph* tmpGraph = SwapManager::Instance( SwapManager::TEMPORARY )->getGraph(i) ;
			
			if( tmpGraph ){
				tmp.setName( tmpGraph->getLabel() ) ;
				for( uint j=0; j<distance[i].size(); j++ ){
					if( distance[i][j] <= currentRadius ){
						QgeGraph* tmpGraph2 = SwapManager::Instance( SwapManager::TEMPORARY )->getGraph(j) ;
						
						if( tmpGraph2 )
							tmp.insert( tmpGraph2->getLabel() ) ;
					}
				}
				vectorSet.push_back( tmp ) ;
			}
		}
		
		cerr << "---------------" << endl ;
		cerr << "The balls are :" << endl ;
		cerr << "---------------" << endl ;
		for( vector< Set<string> >::iterator it = vectorSet.begin(); it != vectorSet.end(); it++ )
			cerr << (*it) << endl ;
		
		cerr << "-----------------------------" << endl ;
		cerr << "The minimal closed sets are :" << endl ;
		cerr << "-----------------------------" << endl ;
		PretopologicalMetricSpace space( vectorSet ) ;
		for( uint i=0; i<vectorSet.size(); i++ ){
			equivalenceClasses[currentRadius].insert( space.getMinimalClosedSet( vectorSet[i].getName(), false ) ) ;
			cerr << space.getMinimalClosedSet( vectorSet[i].getName(), false ) << endl ;
		}
		
		if( space.getMinimalClosedSet( vectorSet[0].getName(), false ) == universal ){
			maxRadius = currentRadius ;
			updateListViewClasses( 0.0 ) ;
			
			dendrogramWidget->setEquivalenceClass( equivalenceClasses, &universal ) ;
			dendrogramWidget->setMaxRadius( maxRadius ) ;
			lineEditMaximumRadius->setText(   QString::number( maxRadius ) ) ;
			
			break ;
		}
	}
	
}

void ClusteringWithPS::run()
{
// 	int progress = 1 ;
// 	int size = SwapManager::Instance( SwapManager::TEMPORARY )->getSize();
// 	progressBarCalculate->setTotalSteps( int((pow(size,2.0) + size) / 2.0) ) ;
// 	progressBarCalculate->reset() ;

	distance.clear() ;
	
	QgeGraph* g1 = new QgeGraph(0) ;
	QgeGraph* g2 = new QgeGraph(0) ;
	
	for( int i=0; i < SwapManager::Instance( SwapManager::TEMPORARY )->getSize(); i++ ){
		
		g1 = SwapManager::Instance( SwapManager::TEMPORARY )->getGraph(i) ;
		
		for( int j=i; j < SwapManager::Instance( SwapManager::TEMPORARY )->getSize(); j++ ){
			
			g2 = SwapManager::Instance( SwapManager::TEMPORARY )->getGraph(j) ;
			
			if( g1 && g2 ){
			
				switch( currentButton ){
					case EUCLIDEAN_DISTANCE:
						distance[i][j] = getEuclideanDistance( g1, g2 ) ;
						distance[j][i] = distance[i][j] ;
						break ;
						
					case FIRST_DIFFERENCE_DISTANCE:
						distance[i][j] = getFirstDifferenceDistance( g1, g2 ) ;
						distance[j][i] = distance[i][j] ;
						break ;
						
					case ALL_DIFFERENCES_DISTANCE:
						distance[i][j] = getAllDifferencesDistance( g1, g2 ) ;
						distance[j][i] = distance[i][j] ;
						break ;
				}
				
			}
// 			progressBarCalculate->setProgress( progress++ ) ;
// 			progressBarCalculate->update() ;
		}
	}
	
	showResults() ;
}

void ClusteringWithPS::transform()
{
	SwapManager::Instance( SwapManager::TEMPORARY )->clear() ;
	QgeGraph* tmp = new QgeGraph( 0 ) ;
	
	int size = SwapManager::Instance( SwapManager::PRINCIPAL )->getSize() ;
	
// 	progressBarTransform->setTotalSteps( size ) ;
// 	progressBarTransform->reset() ;
	
	for( int i=0; i < size; i++ ){
		tmp->remove() ;
		tmp = SwapManager::Instance(SwapManager::PRINCIPAL)->getGraph(i) ;
		SwapManager::Instance( SwapManager::TEMPORARY )->addGraph( getTree(tmp) ) ;
		
// 		progressBarTransform->setProgress(i+1) ;
// 		progressBarTransform->update() ;
	}
	
}

void ClusteringWithPS::viewTrees()
{
	vcsf->show() ;
	vcsf->update( TRUE ) ;
}

QValueList<int> ClusteringWithPS::searchUsingLabel( QgeGraph* tree1, QgeGraph* tree2 )
{
	QValueList<int> difList ;
	graph::node_iterator it1 = tree1->nodes_begin() ;
	graph::node_iterator it2 = tree2->nodes_begin() ;
	int i=0 ;
	
	for( ; it1 != tree1->nodes_end() || it2 != tree2->nodes_end() ; it1++, it2++, i++ ){
		if( tree1->nodeToQgeNode(*it1)->getLabel().compare( tree2->nodeToQgeNode(*it2)->getLabel() ) != 0 )
			difList.append(i) ;
	}
	
	if( it1 == tree1->nodes_end() ){
	
		for( ; it2 != tree2->nodes_end(); it2++, i++ ){
			difList.append(i) ;
		}
		
	}else if( it2 == tree2->nodes_end() ){
	
		for( ; it1 != tree1->nodes_end(); it1++, i++ ){
			difList.append(i) ;
		}

	}
	
	return difList ;
}

/**
 * Este metodo calcula el producto punto entre los elemntos i-ésimos de la sucesión
 * represntada en los arboles que recibe como parámetros. Si la posición seleccionada
 * es mayor que el tamaño del arbol se asignan los ocho valores de ponderación
 * a cero.
 * @param tree1 
 * @param tree2 
 * @param pos 
 * @return 
 */
double ClusteringWithPS::dot( QgeGraph* tree1, QgeGraph* tree2, int pos )
{
	double dotProduct = 0.0 ;
	QValueList<double> values1 ;

	if( tree1->number_of_nodes() > pos ){
	
		graph::node_iterator it1 = tree1->nodes_begin() ;
		for( int i=0; it1 != tree1->nodes_end() ; it1++, i++ ){
			if( i == pos )
				values1 = tree1->nodeToQgeNode(*it1)->getWeights().values() ;
		}
		
	}else{
		for( int i=0; i<8; i++ ) values1.append(0.0) ;
	}
			
	QValueList<double> values2 ;
	
	if( tree2->number_of_nodes() > pos ){
		
		graph::node_iterator it2 = tree2->nodes_begin() ;
		for( int i=0; it2 != tree2->nodes_end() ; it2++, i++ )
			if( i == pos )
				values2 = tree2->nodeToQgeNode(*it2)->getWeights().values() ;
				
	}else{
		for( int i=0; i<8; i++ ) values2.append(0.0) ;
	}
		
// 	for( uint i=0; i<values1.size(); i++ ){
// 		dotProduct += values1[i]*values2[i] ;
// 	}
	
	
	QValueList<double>::iterator it1 = values1.begin() ;
	QValueList<double>::iterator it2 = values2.begin() ;
	for( ; it1 != values1.end() || it2 != values2.end() ; it1++, it2++ )
		dotProduct += (*it1)*(*it2) ;
	
	return dotProduct ;
}

void ClusteringWithPS::setDistance( int currentButton )
{
	this->currentButton = currentButton ;
}

void ClusteringWithPS::updateListViewClasses( double currentRadius )
{
	QImage img ;
	img.loadFromData( img0_clusteringwithpsbase, sizeof( img0_clusteringwithpsbase ), "PNG" );
	
	double currentRadiusReal = 0.0 ;
	
	QValueList<double> keys = equivalenceClasses.keys() ;
	
	// Asumiendo que el qmap organiza los valores en orden ascendente
	for( uint i=0; i < keys.size(); i++ ){
		if( keys[i] > currentRadius*maxRadius ){
			currentRadiusReal = keys[i-1] ;
			break ;
		}if( keys[i] == currentRadius*maxRadius ){
			currentRadiusReal = keys[i] ;
			break ;
		}
	}
	
	Set< Set<string> > classes = equivalenceClasses[ currentRadiusReal ] ;
	
	int i=1 ;
	for( Set< Set<string> >::iterator it = classes.begin(); it != classes.end(); it++, i++ ){
		
		QString className = "Class " + QString::number( i ) ;
		QListViewItem * item = new QListViewItem( listViewEquivalenceClasses, 0 );
		item->setPixmap( 0, img );
		item->setText( 0, tr( className ) );
		item->setText( 1, tr( QString::number( it->size() ) )) ;
		
		for( Set<string>::iterator it2 = it->begin(); it2 != it->end(); it2++ ){
			
			QListViewItem * subItem = new QListViewItem( item, 0 ) ;
			subItem->setText( 0, tr( QString(*it2) ) );
			
		}
		
	}
}

void ClusteringWithPS::radiusChanged( double currentRadius )
{
	listViewEquivalenceClasses->clear() ;
	updateListViewClasses( currentRadius ) ;
}





